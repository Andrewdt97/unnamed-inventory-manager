AWSTemplateFormatVersion: "2010-09-09"
Transform:
  - AWS::Serverless-2016-10-31

Description: >
  Create cloud formation stack for restapi, ip authorizer lambda, backend lambda, s3 bucket for the react-app

Globals:
  Function:
    Timeout: 30
    MemorySize: 256

Parameters:
  IpRange:
    Type: AWS::SSM::Parameter::Value<String>
    Description: "IP range for authorization"
    Default: "ip-range"
  DatabaseUrl:
    Type: AWS::SSM::Parameter::Value<String>
    Description: "URL for the database connection"
    Default: "database-url"

Mappings:
  StagesMap:
    dev:
      ConfigBucket: "dev-bucket-name"
      ConfigKey: "source-data-key-path"
    prod:
      ConfigBucket: "prod-bucket-name"
      ConfigKey: "source-data-key-path"

Resources:
  IpAuthorizerLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.12
      CodeUri: ./ip-authorizer
      Environment:
        Variables:
          IP_RANGE: !Ref IpRange

  BackendLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs20.x
      CodeUri: ./backend-lambda
      Environment:
        Variables:
          DATABASE_URL: !Ref DatabaseUrl
      Events:
        RestApi:
          Type: Api
          Properties:
            Path: /
            Method: ANY

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Auth:
        DefaultAuthorizer: !Ref IpAuthorizerLambda
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "RestApi"
        paths:
          /products:
            get: &standardImplementation
              responses:
                "200":
                  description: "Successful response"
                "400":
                  description: "Bad request"
                "500":
                  description: "Server error"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendLambda.Arn}/invocations"
                httpMethod: "POST"
                type: "aws_proxy"
            post: *standardImplementation
          /product/{product_id}:
            put: *standardImplementation
          /product/delete/{product_id}:
            delete: *standardImplementation
          /users:
            get: *standardImplementation
          /categories:
            get: *standardImplementation
            post: *standardImplementation
          /category/{category_id}:
            put: *standardImplementation
          /category/delete/{category_id}:
            delete: *standardImplementation
      StageName: dev

  # The AWS S3 bucket into which our SPA build files will be deployed
  IMReactApp:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: im-react-app
      PublicAccessBlockConfiguration:
        BlockPublicAcls : true
        BlockPublicPolicy : true
        IgnorePublicAcls : true
        RestrictPublicBuckets : true
      LoggingConfiguration:
        DestinationBucketName: im-react-app-logging
        LogFilePrefix: s3-access-logs
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: 'AES256'

  # The Amazon S3 bucket policy for securing the bucket hosting the application
  IMReactAppPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      PolicyDocument:
        Id: App-Policy
        Version: 2012-10-17
        Statement:
          - Sid: PolicyForCloudFrontPrivateContent
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${IMReactApp}/*
            Principal:
              Service: cloudfront.amazonaws.com
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CFDistribution}
            Action: 's3:GetObject*'
      Bucket: !Ref IMReactApp

  # The Amazon S3 bucket into which access logs from S3 (for the application) and CloudFront will be put
  IMReactAppLogging:
    #checkov:skip=CKV_AWS_18: "This bucket is private and only for storing logs"
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: im-react-app-logging
      PublicAccessBlockConfiguration:
        BlockPublicAcls : true
        BlockPublicPolicy : true
        IgnorePublicAcls : true
        RestrictPublicBuckets : true
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: 'AES256'
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
    DeletionPolicy: Delete

  # The Amazon CloudFront distribution exposing our Single Page Application
  CFDistribution:
    #checkov:skip=CKV_AWS_68: "For demo purposes and to reduce cost, no WAF is configured"
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !GetAtt IMReactApp.RegionalDomainName
          Id: myS3Origin
          S3OriginConfig:
            OriginAccessIdentity: ""
          OriginAccessControlId: !GetAtt CloudFrontOriginAccessControl.Id
        - DomainName: !Sub "${RestApi}.execute-api.${AWS::Region}.amazonaws.com"
          Id: myAPIGTWOrigin
          CustomOriginConfig:
            OriginProtocolPolicy: https-only
        Enabled: 'true'
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          - OPTIONS
          TargetOriginId: myS3Origin
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
          ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03 # SecurityHeadersPolicy
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_All
        Logging:
          Bucket: !GetAtt IMReactAppLogging.RegionalDomainName
          Prefix: 'cloudfront-access-logs'
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
          MinimumProtocolVersion: 'TLSv1.2_2021'

  # The Amazon CloudFront origin access control
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    DependsOn:
      - IMReactApp
    Properties: 
      OriginAccessControlConfig:
        Description: Default Origin Access Control
        Name: !Ref AWS::StackName
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

Outputs:
  ApiGatewayInvokeURL:
    Description: "Invoke URL for the API Gateway endpoint"
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com"
  IpAuthorizerLambdaFunctionArn:
    Description: "ARN of the IP authorizer Lambda"
    Value: !GetAtt IpAuthorizerLambda.Arn
  BackendLambdaFunctionArn:
    Description: "ARN of the Backend Lambda"
    Value: !GetAtt BackendLambda.Arn
  APIEndpoint:
    Description: "Base URL for the API Gateway"
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com"
  BucketName:
    Description: "Name of the S3 bucket for the React app"
    Value: !Ref IMReactApp
  CFDistributionURL:
    Description: "URL for the CloudFront distribution"
    Value: !GetAtt CFDistribution.DomainName