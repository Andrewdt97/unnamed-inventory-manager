AWSTemplateFormatVersion: "2010-09-09"
Transform:
  - AWS::LanguageExtensions
  - AWS::Serverless-2016-10-31

Description: >
  Create cloud formation stack for restapi, ip authorizer lambda, backend lambda

Globals:
  Function:
    Timeout: 30
    MemorySize: 256

# Caleb TODO: Use the link below to resolve the parameters type issue:
# https://stackoverflow.com/questions/65961753/aws-sam-parameter-store-how-to-select-parameter-for-the-deployment-into-diffe

Parameters:
  IPRANGE:
    Type: AWS::SSM:Parameter::Value<String>
    Description: "IP range for authorization"
    Default: ip-range
  DATABASEURL:
    Type: AWS::SSM:Parameter::Value<String>
    Description: "URL for the database connection"
    Default: database-url

Resources:
  IPAuthorizerLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda_function.lambda_handler
      Runtime: python3.12
      CodeUri: ./ip-authorizer
      Environment:
        Variables:
          IP_RANGE: !Ref IPRANGE

  BackendLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs20.x
      CodeUri: ./backend-lambda
      Environment:
        Variables:
          DATABASE_URL: !Ref DATABASEURL
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: ANY

  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Auth:
        DefaultAuthorizer: IPAuthorizerLambdaFunction
      DefinitionBody:
        swagger: "2.0"
        info:
          title: "RestApi"
        paths:
          /products:
            get: &getProducts
              responses:
                "200":
                  description: "Successful response for GET products request"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendLambda.Arn}/invocations"
                httpMethod: "GET"
                type: "aws_proxy"
            post: &postProducts
              responses:
                "200":
                  description: "Successful response for POST products request"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendLambda.Arn}/invocations"
                httpMethod: "POST"
                type: "aws_proxy"
          /product:
            post: *postProducts
          /products/sold:
            post: *postProducts
          /products/to-floor:
            post: *postProducts
          /users:
            get:
              responses:
                "200":
                  description: "Successful response for GET users request"
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendLambda.Arn}/invocations"
                httpMethod: "GET"
                type: "aws_proxy"

Outputs:
  APIGatewayInvokeURL:
    Description: "Invoke URL for the API Gateway endpoint"
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
  IPAuthorizerLambdaFunctionArn:
    Description: "ARN of the IP authorizer Lambda"
    Value: !GetAtt IPAuthorizerLambda.Arn
  BackendLambdaFunctionArn:
    Description: "ARN of the Backend Lambda"
    Value: !GetAtt BackendLambda.Arn
